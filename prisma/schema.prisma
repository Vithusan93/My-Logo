// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 Int            @id @default(autoincrement())
  email              String         @unique
  name               String
  password           String
  instructingClasses LogoClass[]    @relation("instructors")
  assistingClasses   LogoClass[]    @relation("assistantInstructors")
  ClassStudent       ClassStudent[]
  Message            Message[]
  StudentTask        StudentTask[]
}

model LogoClass {
  id       Int    @id @default(autoincrement())
  name     String
  link     String @unique
  password String

  instructorId          Int
  instructor            User           @relation("instructors", fields: [instructorId], references: [id])
  assistantInstructorId Int?
  assistantInstructor   User?          @relation("assistantInstructors", fields: [assistantInstructorId], references: [id])
  ClassStudent          ClassStudent[]
  Message               Message[]
  Task                  Task[]
}

model ClassStudent {
  logoClassId Int
  logoClass   LogoClass @relation(fields: [logoClassId], references: [id])

  studentId Int
  student   User @relation(fields: [studentId], references: [id])

  @@id([logoClassId, studentId])
}

model Message {
  id   Int    @id @default(autoincrement())
  text String

  senderId Int
  sender   User @relation(fields: [senderId], references: [id])

  logoClassId Int
  logoClass   LogoClass @relation(fields: [logoClassId], references: [id])

  isVisible Boolean  @default(true)
  sentTime  DateTime @default(now())
}

model Task {
  id       Int    @id @default(autoincrement())
  question String
  script   String @default("")

  logoClassId Int
  logoClass   LogoClass @relation(fields: [logoClassId], references: [id])
  createdAt   DateTime  @default(now())

  StudentTask StudentTask[]
}

model StudentTask {
  studentId Int
  student   User @relation(fields: [studentId], references: [id])

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])

  script      String  @default("")
  isSubmitted Boolean @default(false)

  points Int?

  @@id([studentId, taskId])
}
